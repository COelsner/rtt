package siple.syntax;

import java.io.*;

import rtt.annotations.*;

import siple.ast.*;
import siple.semantics.Type;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
@Parser
public class SiPLEParser extends AbstractParser {
	private SiPLELexer lexer;
	
	@Parser.Initialize
	public void initParser(InputStream is) {
		lexer = new SiPLELexer(is);
	}
	
	@Parser.AST
	public Object getAst() throws Exception, IOException {
		return parse(lexer);
	}
	
	static public class Terminals {
		static public final short EOF = 0;
		static public final short IDENTIFIER = 1;
		static public final short pBRACKETOPENROUND = 2;
		static public final short kDEREF = 3;
		static public final short kCALL = 4;
		static public final short pMINUS = 5;
		static public final short kADDRESS = 6;
		static public final short CONSTANT = 7;
		static public final short kNOT = 8;
		static public final short pSEMICOLON = 9;
		static public final short kPROCEDURE = 10;
		static public final short pBRACKETCLOSEROUND = 11;
		static public final short kPOINTER = 12;
		static public final short kBOOLEAN = 13;
		static public final short kINTEGER = 14;
		static public final short kREAL = 15;
		static public final short kVAR = 16;
		static public final short kBEGIN = 17;
		static public final short pCOLON = 18;
		static public final short pPLUS = 19;
		static public final short kIF = 20;
		static public final short kWHILE = 21;
		static public final short kRETURN = 22;
		static public final short kWRITE = 23;
		static public final short kREAD = 24;
		static public final short pCOMMA = 25;
		static public final short pANGLEBRACKETRIGHT = 26;
		static public final short pANGLEBRACKETLEFT = 27;
		static public final short pANGLEBRACKETRIGHT_EQUALS = 28;
		static public final short pANGLEBRACKETLEFT_EQUALS = 29;
		static public final short pSTAR = 30;
		static public final short pSLASH = 31;
		static public final short kFI = 32;
		static public final short pCOLON_EQUALS = 33;
		static public final short kAND = 34;
		static public final short pEQUALS = 35;
		static public final short pSHARP = 36;
		static public final short kTHEN = 37;
		static public final short kELSE = 38;
		static public final short kDO = 39;
		static public final short kOD = 40;
		static public final short kEND = 41;
		static public final short kOR = 43;

		static public final String[] NAMES = {
			"EOF",
			"IDENTIFIER",
			"pBRACKETOPENROUND",
			"kDEREF",
			"kCALL",
			"pMINUS",
			"kADDRESS",
			"CONSTANT",
			"kNOT",
			"pSEMICOLON",
			"kPROCEDURE",
			"pBRACKETCLOSEROUND",
			"kPOINTER",
			"kBOOLEAN",
			"kINTEGER",
			"kREAL",
			"kVAR",
			"kBEGIN",
			"pCOLON",
			"pPLUS",
			"kIF",
			"kWHILE",
			"kRETURN",
			"kWRITE",
			"kREAD",
			"pCOMMA",
			"pANGLEBRACKETRIGHT",
			"pANGLEBRACKETLEFT",
			"pANGLEBRACKETRIGHT_EQUALS",
			"pANGLEBRACKETLEFT_EQUALS",
			"pSTAR",
			"pSLASH",
			"kFI",
			"pCOLON_EQUALS",
			"kAND",
			"pEQUALS",
			"pSHARP",
			"kTHEN",
			"kELSE",
			"kDO",
			"kOD",
			"kEND",
			"kOR"
		};
	}
	static public class AltGoals {
		static public final short Type = 42;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pTLsTu5KKKFRil2UGz4980WH081489eOQyX7IgXA8eO46Az5uaeeA2I55GGKL051l#vgU" +
		"zO4UnTr6AW2YeY88YeE9uPjxTz$RjM#JZdn$xSkRUU#RCdTdPsPaDO2$5UgMm5ZTX18RZUa" +
		"odbul9k1orc8zBqHBvI59dq1szi1ntu4winsD6dwl#eN83ybYsLDzIMOHKeyz7UvS#2ytO9" +
		"jkqQU3f8u0W2aoR#aYFwoDaz7eC4r2CUjJNHJ9IK0SDZNuWhd7fjUuwpCEDc8rHk1fBq3VA" +
		"3KO5Bi5uZFHLEUCPPiOp4RSag7guSZbSgG$NsuUxoeURwSCjyE4M#N0hVBXLFdTHYykmB86" +
		"zFO4vLnpVL$$pRd#Xn#jSCrJ3IA$AD7Jbck#2AgxvTUZiYTeXmyKqYQlVnCWzunUpvd6k$U" +
		"pesc#Anh3LK#GQHRbOYz7acqVvUcZXydDSVYkNtpeXpzYeDpVgtKPbcwXo4CPW3fPAxL1FV" +
		"6qqpiH368ShY75yP$KxM8j9kCXuut0hXk1AOWZznRWPQ$XRorzRCldOZ0VGWLPhEggJwAIE" +
		"eHjweX1XbA0CvQX47#vPrUY70VnDmLHCmmmin2pSWBkm4lVWNZo8rRWRZ#9#t8UDwWGUnYF" +
		"g3$Kx8bTB8XyMom2IODEpZHSqTrd0fz65kqqQUmJdkp6VLYQVWCN#8oeGhVZaWbIr9jgnlT" +
		"QdSI#BwKkuIraSiMuJylIHpzmTJHkRkwIxZv1HHSRGYkeWdq1zpbq3vjRwDfodc3wYwyePw" +
		"ixzgf3pLEJYEl1ESpXVVYfdF94dM$SiglyxvxqBhGabiAa9pBbYRr$ds$v2ZmlYPgZ0hCem" +
		"pskzvakvvWjuziP7eRZwS5nzCqRnCwvhWgnnrdurLtyVddT1vd4uTuiWdx73n$kMoqzt#M6" +
		"VF7wUEqCMTzbixgvExTdYC4UPR91ilbfoZAAtyJIVmJlEu4$xwSnlSMu3dE4CiuCKitsQqH" +
		"JpJie9NUOPhxt4DlUTJlmsoZMxLuYbpJB4sTHrfPm$hTBjGyOB6pzLcGiDYJJkObkMHlR3H" +
		"eJU3GSIBJJdW5TRLcsdhPQuD#EFQ3iH0#ZlZl3M0R5l4eTTxTE5tolseDZZn27YQ2IsCmZc" +
		"izkGsqgYAIttQxk2g95ScVG7ntBRGuHVGh#7zlNT2TUTt33nJz0l5B#6$d1fNydY3Eq8YOl" +
		"OPp9j5MrZ4YMqBGX5v97Ff#rCVWHjaUHBSerdD8lzj7boZnN2LzDVJlIdNuTsA6q1xKZQ9h" +
		"HZ95TOzEE9YSGeYITHCvbMT7O3nhDfEHQxkTE$zBc0t5ZHyVoosSvQJClvi5RI5dlqQyYLI" +
		"$z7w4zmrMrWF4LozIMckkvr1j6Fc2RnTCbXys#cSBE8sUBt8bA9ESHSOfvd71krvUFRvUPZ" +
		"zKZrw4#w$FbYbxcuLOxFdAVyShgqEzmnzVjbp5m3jbvpMH9dEdtvZ6#qQBAeMKYR7JyUEFE" +
		"OGtwrfwrdBk2yIvl5rWelxw1rJCQvJ$XjdlPXbx$8SwzFYjqfzhJeScLyGR$x4yqAJwuzPz" +
		"6jzU4sYQr9h8li7LB$XAVTrfXlTqji6tcl$mlwFH1R6daNxMgVyMr1z58lgstg9V5V5FiSy" +
		"GBnj7gMvVFg6PP$4NyIfqLp2fvB$MhANzHHbZyxZB17N8eVHV#3ulwXzX5xYTt4LyHdnCV4" +
		"1#fTzOxHSPTLhwXlr1xQNSHEubE2ExDwNtBj4Fks#fhbb#eJzQ5wJxrbkEtgSzSeNrUlgjT" +
		"elr1lcFYmEcJizwRyZl$ZHtG7Y8F6#ycKnrqvVbD$qmpY6MqHDazhYwUsXispF88IVa6KyU" +
		"kXZDyGPVoIAEC9M4LD5K#$OgAS6Sgfgo1NOMnT8aMGH0I43qJzKcfBMTUJjeYS$YOifDNVR" +
		"3re8x1u7WGyi7Yw1mGMJ##0mE9PRWiidjiEaWJQ3$14rr$fsgOOlv9y9UCmRGn9H0gHB7w0" +
		"vwT51D3lNm47ONy=");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	private final Action[] actions;

	public SiPLEParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = CompilationUnit
			RETURN2,	// [1] $goal = $Type Type; returns 'Type' although none is marked
			new Action() {	// [2] CompilationUnit = DeclarationList.decls
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decls = _symbols[offset + 1];
					final List<Declaration> decls = (List<Declaration>) _symbol_decls.value;
					
		return new Symbol(new CompilationUnit(decls));
				}
			},
			new Action() {	// [3] DeclarationList = Declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final Declaration decl = (Declaration) _symbol_decl.value;
					
		return new Symbol(new List<Declaration>().add(decl));
				}
			},
			new Action() {	// [4] DeclarationList = DeclarationList.list Declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List<Declaration> list = (List<Declaration>) _symbol_list.value;
					final Symbol _symbol_decl = _symbols[offset + 2];
					final Declaration decl = (Declaration) _symbol_decl.value;
					
		list.add(decl);
		return _symbol_list;
				}
			},
			new Action() {	// [5] Declaration = VariableDeclaration.decl pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final VariableDeclaration decl = (VariableDeclaration) _symbol_decl.value;
					
		return _symbol_decl;
				}
			},
			new Action() {	// [6] Declaration = ProcedureDeclaration.decl pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final ProcedureDeclaration decl = (ProcedureDeclaration) _symbol_decl.value;
					
		return _symbol_decl;
				}
			},
			new Action() {	// [7] VariableDeclaration = kVAR IDENTIFIER.id pCOLON Type.type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_type = _symbols[offset + 4];
					final Type type = (Type) _symbol_type.value;
					
		return new Symbol(new VariableDeclaration(id, type));
				}
			},
			new Action() {	// [8] ProcedureDeclaration = kPROCEDURE IDENTIFIER.id pBRACKETOPENROUND ParameterList.paras pBRACKETCLOSEROUND pCOLON Type.returnType Block.body
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_paras = _symbols[offset + 4];
					final List<VariableDeclaration> paras = (List<VariableDeclaration>) _symbol_paras.value;
					final Symbol _symbol_returnType = _symbols[offset + 7];
					final Type returnType = (Type) _symbol_returnType.value;
					final Symbol _symbol_body = _symbols[offset + 8];
					final Block body = (Block) _symbol_body.value;
					
		return new Symbol(new ProcedureDeclaration(id, paras, returnType, body));
				}
			},
			new Action() {	// [9] ProcedureDeclaration = kPROCEDURE IDENTIFIER.id pBRACKETOPENROUND pBRACKETCLOSEROUND pCOLON Type.returnType Block.body
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_returnType = _symbols[offset + 6];
					final Type returnType = (Type) _symbol_returnType.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final Block body = (Block) _symbol_body.value;
					
		return new Symbol(new ProcedureDeclaration(id, new List<VariableDeclaration>(), returnType, body));
				}
			},
			new Action() {	// [10] ProcedureDeclaration = kPROCEDURE IDENTIFIER.id pBRACKETOPENROUND ParameterList.paras pBRACKETCLOSEROUND Block.body
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_paras = _symbols[offset + 4];
					final List<VariableDeclaration> paras = (List<VariableDeclaration>) _symbol_paras.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final Block body = (Block) _symbol_body.value;
					
		return new Symbol(new ProcedureDeclaration(id, paras, Type.Undefined, body));
				}
			},
			new Action() {	// [11] ProcedureDeclaration = kPROCEDURE IDENTIFIER.id pBRACKETOPENROUND pBRACKETCLOSEROUND Block.body
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_body = _symbols[offset + 5];
					final Block body = (Block) _symbol_body.value;
					
		return new Symbol(new ProcedureDeclaration(id, new List<VariableDeclaration>(), Type.Undefined, body));
				}
			},
			new Action() {	// [12] ParameterList = VariableDeclaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final VariableDeclaration decl = (VariableDeclaration) _symbol_decl.value;
					
		return new Symbol(new List<Declaration>().add(decl));
				}
			},
			new Action() {	// [13] ParameterList = ParameterList.list pCOMMA VariableDeclaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List<VariableDeclaration> list = (List<VariableDeclaration>) _symbol_list.value;
					final Symbol _symbol_decl = _symbols[offset + 3];
					final VariableDeclaration decl = (VariableDeclaration) _symbol_decl.value;
					
		list.add(decl);
		return _symbol_list;
				}
			},
			new Action() {	// [14] Block = kBEGIN StatementList.list kEND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 2];
					final List<Statement> list = (List<Statement>) _symbol_list.value;
					 
		return new Symbol(new Block(list));
				}
			},
			new Action() {	// [15] StatementList = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
		return new Symbol(new List<Statement>());
				}
			},
			new Action() {	// [16] StatementList = StatementList.list Statement.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List<Statement> list = (List<Statement>) _symbol_list.value;
					final Symbol _symbol_stmt = _symbols[offset + 2];
					final Statement stmt = (Statement) _symbol_stmt.value;
					
		list.add(stmt);
		return _symbol_list;
				}
			},
			Action.RETURN,	// [17] Statement = Declaration
			new Action() {	// [18] Statement = Block.stmt pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final Block stmt = (Block) _symbol_stmt.value;
					
		return _symbol_stmt;
				}
			},
			new Action() {	// [19] Statement = kIF Expression.cond kTHEN StatementList.body kELSE StatementList.alternative kFI pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cond = _symbols[offset + 2];
					final Expression cond = (Expression) _symbol_cond.value;
					final Symbol _symbol_body = _symbols[offset + 4];
					final List<Statement> body = (List<Statement>) _symbol_body.value;
					final Symbol _symbol_alternative = _symbols[offset + 6];
					final List<Statement> alternative = (List<Statement>) _symbol_alternative.value;
					
		return new Symbol(new If(cond, new Block(body), new Opt(new Block(alternative))));
				}
			},
			new Action() {	// [20] Statement = kIF Expression.cond kTHEN StatementList.body kFI pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cond = _symbols[offset + 2];
					final Expression cond = (Expression) _symbol_cond.value;
					final Symbol _symbol_body = _symbols[offset + 4];
					final List<Statement> body = (List<Statement>) _symbol_body.value;
					
		return new Symbol(new If(cond, new Block(body), new Opt()));
				}
			},
			new Action() {	// [21] Statement = kWHILE Expression.cond kDO StatementList.body kOD pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cond = _symbols[offset + 2];
					final Expression cond = (Expression) _symbol_cond.value;
					final Symbol _symbol_body = _symbols[offset + 4];
					final List<Statement> body = (List<Statement>) _symbol_body.value;
					
		return new Symbol(new While(cond, new Block(body)));
				}
			},
			new Action() {	// [22] Statement = LValueExpression.lexpr pCOLON_EQUALS Expression.rexpr pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_lexpr = _symbols[offset + 1];
					final Expression lexpr = (Expression) _symbol_lexpr.value;
					final Symbol _symbol_rexpr = _symbols[offset + 3];
					final Expression rexpr = (Expression) _symbol_rexpr.value;
					
		return new Symbol(new VariableAssignment(lexpr, rexpr));
				}
			},
			new Action() {	// [23] Statement = kRETURN Expression.expr pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
		return new Symbol(new ProcedureReturn(new Opt(expr)));
				}
			},
			new Action() {	// [24] Statement = kRETURN pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
		return new Symbol(new ProcedureReturn(new Opt()));
				}
			},
			new Action() {	// [25] Statement = kWRITE Expression.expr pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
		return new Symbol(new Write(expr));
				}
			},
			new Action() {	// [26] Statement = kREAD LValueExpression.expr pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
		return new Symbol(new Read(expr));
				}
			},
			new Action() {	// [27] Statement = ProcedureCall.call pSEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_call = _symbols[offset + 1];
					final ProcedureCall call = (ProcedureCall) _symbol_call.value;
					
		return _symbol_call;
				}
			},
			new Action() {	// [28] LValueExpression = IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					
		return new Symbol(new Reference(id));
				}
			},
			new Action() {	// [29] LValueExpression = kDEREF pBRACKETOPENROUND LValueExpression.expr pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					
		return new Symbol(new Dereference(expr));
				}
			},
			Action.RETURN,	// [30] Expression = OrExpr
			new Action() {	// [31] OrExpr = OrExpr.expr1 kOR AndExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new Or(expr1, expr2));
				}
			},
			Action.RETURN,	// [32] OrExpr = AndExpr
			new Action() {	// [33] AndExpr = AndExpr.expr1 kAND EqExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new And(expr1, expr2));
				}
			},
			Action.RETURN,	// [34] AndExpr = EqExpr
			new Action() {	// [35] EqExpr = EqExpr.expr1 pEQUALS RelExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new Equal(expr1, expr2));
				}
			},
			new Action() {	// [36] EqExpr = EqExpr.expr1 pSHARP RelExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new Not(new Equal(expr1, expr2)));
				}
			},
			Action.RETURN,	// [37] EqExpr = RelExpr
			new Action() {	// [38] RelExpr = RelExpr.expr1 pANGLEBRACKETRIGHT AddExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new GreaterThan(expr1, expr2));
				}
			},
			new Action() {	// [39] RelExpr = RelExpr.expr1 pANGLEBRACKETLEFT AddExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new LesserThan(expr1, expr2));
				}
			},
			new Action() {	// [40] RelExpr = RelExpr.expr1 pANGLEBRACKETRIGHT_EQUALS AddExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new GreaterThanEqual(expr1, expr2));
				}
			},
			new Action() {	// [41] RelExpr = RelExpr.expr1 pANGLEBRACKETLEFT_EQUALS AddExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new LesserThanEqual(expr1, expr2));
				}
			},
			Action.RETURN,	// [42] RelExpr = AddExpr
			new Action() {	// [43] AddExpr = AddExpr.expr1 pPLUS MulExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new Addition(expr1, expr2));
				}
			},
			new Action() {	// [44] AddExpr = AddExpr.expr1 pMINUS MulExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new Subtraction(expr1, expr2));
				}
			},
			Action.RETURN,	// [45] AddExpr = MulExpr
			new Action() {	// [46] MulExpr = MulExpr.expr1 pSTAR UnaryExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new Multiplication(expr1, expr2));
				}
			},
			new Action() {	// [47] MulExpr = MulExpr.expr1 pSLASH UnaryExpr.expr2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr1 = _symbols[offset + 1];
					final Expression expr1 = (Expression) _symbol_expr1.value;
					final Symbol _symbol_expr2 = _symbols[offset + 3];
					final Expression expr2 = (Expression) _symbol_expr2.value;
					
		return new Symbol(new Division(expr1, expr2));
				}
			},
			Action.RETURN,	// [48] MulExpr = UnaryExpr
			new Action() {	// [49] UnaryExpr = pMINUS PrimExpr.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
		return new Symbol(new UMinus(expr));
				}
			},
			new Action() {	// [50] UnaryExpr = kNOT PrimExpr.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
		return new Symbol(new Not(expr));
				}
			},
			Action.RETURN,	// [51] UnaryExpr = PrimExpr
			new Action() {	// [52] PrimExpr = CONSTANT.co
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_co = _symbols[offset + 1];
					final String co = (String) _symbol_co.value;
					
		return new Symbol(new Constant(co));
				}
			},
			new Action() {	// [53] PrimExpr = IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					
		return new Symbol(new Dereference(new Reference(id)));
				}
			},
			new Action() {	// [54] PrimExpr = kADDRESS pBRACKETOPENROUND IDENTIFIER.id pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 3];
					final String id = (String) _symbol_id.value;
					
		return new Symbol(new Reference(id));
				}
			},
			new Action() {	// [55] PrimExpr = kDEREF pBRACKETOPENROUND Expression.expr pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					
		return new Symbol(new Dereference(expr));
				}
			},
			Action.RETURN,	// [56] PrimExpr = ProcedureCall
			new Action() {	// [57] PrimExpr = pBRACKETOPENROUND Expression.expr pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					
		return new Symbol(new NestedExpression(expr));
				}
			},
			new Action() {	// [58] ProcedureCall = IDENTIFIER.id pBRACKETOPENROUND ArgumentList.list pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final List<Expression> list = (List<Expression>) _symbol_list.value;
					
		return new Symbol(new ProcedureCall(new Dereference(new Reference(id)), list));
				}
			},
			new Action() {	// [59] ProcedureCall = IDENTIFIER.id pBRACKETOPENROUND pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					
		return new Symbol(new ProcedureCall(new Dereference(new Reference(id)), new List<Expression>()));
				}
			},
			new Action() {	// [60] ProcedureCall = kCALL pBRACKETOPENROUND Expression.expr pCOLON ArgumentList.list pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					final Symbol _symbol_list = _symbols[offset + 5];
					final List<Expression> list = (List<Expression>) _symbol_list.value;
					
		return new Symbol(new ProcedureCall(expr, list));
				}
			},
			new Action() {	// [61] ProcedureCall = kCALL pBRACKETOPENROUND Expression.expr pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					
			return new Symbol(new ProcedureCall(expr, new List<Expression>()));
				}
			},
			new Action() {	// [62] ArgumentList = Expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final Expression expr = (Expression) _symbol_expr.value;
					
		return new Symbol(new List<Expression>().add(expr));
				}
			},
			new Action() {	// [63] ArgumentList = ArgumentList.list pCOMMA Expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List<Expression> list = (List<Expression>) _symbol_list.value;
					final Symbol _symbol_expr = _symbols[offset + 3];
					final Expression expr = (Expression) _symbol_expr.value;
					
		list.add(expr);
		return _symbol_list;
				}
			},
			new Action() {	// [64] Type = kBOOLEAN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
		return new Symbol(Type.Boolean);
				}
			},
			new Action() {	// [65] Type = kINTEGER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
		return new Symbol(Type.Integer);
				}
			},
			new Action() {	// [66] Type = kREAL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
		return new Symbol(Type.Real);
				}
			},
			new Action() {	// [67] Type = kPOINTER pBRACKETOPENROUND Type.type pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_type = _symbols[offset + 3];
					final Type type = (Type) _symbol_type.value;
					
		return new Symbol(Type.newPointer(type));
				}
			},
			new Action() {	// [68] Type = kPROCEDURE pBRACKETOPENROUND TypeList.paraTypes pBRACKETCLOSEROUND pCOLON Type.returnType
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_paraTypes = _symbols[offset + 3];
					final java.util.List<Type> paraTypes = (java.util.List<Type>) _symbol_paraTypes.value;
					final Symbol _symbol_returnType = _symbols[offset + 6];
					final Type returnType = (Type) _symbol_returnType.value;
					
		return new Symbol(Type.newProcedure(paraTypes.toArray(new Type[0]), returnType));
				}
			},
			new Action() {	// [69] Type = kPROCEDURE pBRACKETOPENROUND pBRACKETCLOSEROUND pCOLON Type.returnType
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_returnType = _symbols[offset + 5];
					final Type returnType = (Type) _symbol_returnType.value;
					
		return new Symbol(Type.newProcedure(new Type[0], returnType));
				}
			},
			new Action() {	// [70] Type = kPROCEDURE pBRACKETOPENROUND TypeList.paraTypes pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_paraTypes = _symbols[offset + 3];
					final java.util.List<Type> paraTypes = (java.util.List<Type>) _symbol_paraTypes.value;
					
		return new Symbol(Type.newProcedure(paraTypes.toArray(new Type[0]), Type.Undefined));
				}
			},
			new Action() {	// [71] Type = kPROCEDURE pBRACKETOPENROUND pBRACKETCLOSEROUND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
		return new Symbol(Type.newProcedure(new Type[0], Type.Undefined));
				}
			},
			new Action() {	// [72] TypeList = Type.type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_type = _symbols[offset + 1];
					final Type type = (Type) _symbol_type.value;
					
		java.util.List<Type> list = new java.util.LinkedList<Type>();
		list.add(type);
		return new Symbol(list);
				}
			},
			new Action() {	// [73] TypeList = TypeList.list pCOMMA Type.type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final java.util.List<Type> list = (java.util.List<Type>) _symbol_list.value;
					final Symbol _symbol_type = _symbols[offset + 3];
					final Type type = (Type) _symbol_type.value;
					
		list.add(type);
		return _symbol_list;
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
